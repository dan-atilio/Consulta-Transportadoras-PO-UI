import { PoThemeService, PoThemeTypeEnum } from '@po-ui/ng-components';
import { ProTheme } from '../models/pro-theme';
import { ProThemeEnum } from './../models/pro-theme';
import { ProJsToAdvplService } from '../../pro-js-to-advpl';
import { Observable } from 'rxjs';
import { ProUserProfileService } from '../../pro-user-profile';
import { ProSessionInfoService } from '../../pro-session-info';
import * as i0 from "@angular/core";
export declare class ProThemeService {
    private poTheme;
    private proJsToAdvplService;
    private proUserProfileService;
    private proSessionInfoService;
    proTheme: ProTheme;
    constructor(poTheme: PoThemeService, proJsToAdvplService: ProJsToAdvplService, proUserProfileService: ProUserProfileService, proSessionInfoService: ProSessionInfoService);
    /**
     * @description Método para configurar o tema do aplicativo com base
     * na configuração da localStorage - ProTheme
     * @param theme ProThemeEnum, tema a ser aplicado
     * @param type PoThemeTypeEnum, tipo do tema
     */
    setTheme(theme?: ProThemeEnum, type?: PoThemeTypeEnum): void;
    private getProtheusConfig;
    /**
     * @description Retorna se o usuário pode habilitar o tema dark.
     * @returns Observable de boolean
     */
    canUseDarkTheme(): Observable<boolean>;
    /**
     * @description Consulta se pode utilizar o tema dark fazendo a conexão direta com advpl.
     * @returns Observable de boolean
     */
    private checkDarkFromAdvpl;
    /**
     * @description Salva no profile do usuário se ele ativou ou desativou o tema dark.
     * @param value string, valor a ser salvo no profile (true/false)
     * @returns Observable de boolean
     */
    setThemeProfile(value: string): Observable<boolean>;
    /**
     * @description Salva no profile fazendo a comunicação direta com o Protheus via JsToAdvpl.
     * @param value string, valor a ser salvo no profile (true/false)
     * @returns Observable de boolean
     */
    private setThemeProfileFromAdvpl;
    /**
     * @description Salva no profile via api.
     * @param value string, valor a ser salvo no profile (true/false)
     * @returns Observable de boolean
     */
    private setThemeProfileFromApi;
    /**
     * @description Retorna o profile do usuário indicando se ele ativou/desativou o tema dark.
     * @returns Observable de boolean
     */
    getThemeProfile(): Observable<boolean>;
    /**
     * @description Retorna o profile realização a comunicação direta com o Protheus via JsToAdvpl.
     * @returns Observable de boolean
     */
    private getThemeProfileFromAdvpl;
    /**
     * @description Renotar o profile do usuário via api.
     * @returns Observable de boolean
     */
    private getThemeProfileFromApi;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProThemeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProThemeService>;
}
