import { HttpClient } from '@angular/common/http';
import { ProJsToAdvplService } from '../pro-js-to-advpl/services/pro-js-to-advpl.service';
import { Observable } from 'rxjs';
import { ProMfaHasSecretInterface, ProMfaQrCodeInterface, ProMfaValidCodeInterface } from './models/pro-mfa.interface';
import * as i0 from "@angular/core";
export declare class ProMfaService {
    private http;
    private advplService;
    private isHTTP;
    private hasMFA;
    private isValidToken;
    private isSigaCfg;
    constructor(http: HttpClient, advplService: ProJsToAdvplService);
    /**
     * @description Atribui valor para hasMFA.
     * @param hasMFA boolean, indica se o usuário possui MFA habilitado.
     */
    setHasMFA(hasMFA: boolean): void;
    /**
     * @description Retorna o atributo hasMFA.
     * @returns boolean, indica se o usuário possui MFA habilitado.
     */
    getHasMFA(): boolean;
    /**
     * @description Atribui valor para isValidToken.
     * @param isValid boolean, indica se o token MFA é válido.
     */
    setIsValidToken(isValid: boolean): void;
    /**
     * @description Retorna o atributo isValidToken.
     * @returns boolean, indica se o token MFA é válido.
     */
    getIsValidToken(): boolean;
    /**
     * @description Atribui valor para isSigaCfg.
     * @param isCfg boolean, indica se o login está sendo feito no módulo SIGACFG.
     */
    setIsSigaCfg(isCfg: boolean): void;
    /**
     * @description Retorna o atributo isSigaCfg.
     * @returns boolean, indica se o login está sendo feito no módulo SIGACFG.
     */
    getIsSigaCfg(): boolean;
    /**
     * @description
     * Serviço que verifica se o usuário já possui MFA registrado.
     * @return Json da interface ProMfaHasSecretInterface
     */
    userHasMfaSecurity(): Observable<ProMfaHasSecretInterface>;
    /**
     * @description
     * Serviço que retorna os dados para geração do Qr Code
     * @return Json da interface ProMfaQrCodeInterface
     */
    getMfaQrCode(): Observable<ProMfaQrCodeInterface>;
    /**
     * @description
     * Serviço que valida o token informado.
     * @param tokenMfa, token informado pelo usuário
     * @return Json da interface ProMfaValidCodeInterface
     */
    getMfaValid(tokenMfa: string): Observable<ProMfaValidCodeInterface>;
    /**
     * @description Valida se está no módulo SIGACFG.
     * @return Observable boolean
     */
    isSIGACFG(): Observable<boolean>;
    /**
     * @description Metodo apenas para apoio nos testes automatizados
     * @return Informa se se o Http esta ativo
     */
    isChannelHTTP(): boolean;
    /**
     * @description Muda o parametro de environment para Http
     * @param value, indica o valor a ser atribuido
     */
    setChannelAsHTTP(value: boolean): void;
    /**
     * @description Validação do response e disparo do evento de erro
     * @param protheusResponse, Response do JsToAdvpl
     * @param subscriber, Subscriber do JsToAdvpl
     * @return Indica se a resposta foi validada
     */
    private validResponse;
    /**
     * @description Retorna o objeto sender
     * @param type, Tipo do Sender
     * @param content, Conteudo a ser enviado
     * @param receiveId, Id do evento
     * @param autoDestruct, Indica se realiza a eliminação automatica do objeto
     * @return Objeto Sender
     */
    private getJsToAdvplSend;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProMfaService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProMfaService>;
}
