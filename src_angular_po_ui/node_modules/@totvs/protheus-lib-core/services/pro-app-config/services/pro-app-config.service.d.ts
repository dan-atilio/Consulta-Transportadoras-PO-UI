import { HttpClient } from '@angular/common/http';
import { EventEmitter } from '@angular/core';
import { ProThemeService } from '../../pro-theme/services/pro-theme.service';
import { ProJsToAdvplService } from './../../pro-js-to-advpl/services/pro-js-to-advpl.service';
import { ProAppConfig } from './../models/pro-app-config';
import { ProSessionInfoService } from '../../pro-session-info';
import { ProAuthService } from '../../pro-authorization';
import * as i0 from "@angular/core";
export declare class ProAppConfigService {
    private http;
    private advplService;
    private themeService;
    private sessionInfoService;
    private proAuthService;
    private _ProAppConfig;
    readyEmitter: EventEmitter<any>;
    constructor(http: HttpClient, advplService: ProJsToAdvplService, themeService: ProThemeService, sessionInfoService: ProSessionInfoService, proAuthService: ProAuthService);
    /**
     * @description Realiza o carregamento do appConfig.json e adiciona as informações de contexto.
     * @returns Promise, ProAppConfig
     */
    loadAppConfig(): Promise<object>;
    /**
     * @description Método para encerrar o aplicativo
     * @param ask Boolean que indica se o sistema deve perguntar antes de fechar o app
     */
    callAppClose(ask?: boolean): void;
    insideProtheus(): boolean;
    /**
     * @description Retorna as informações do appConfig.json (ProAppConfig)
     */
    get proAppConfig(): ProAppConfig;
    get nameApp(): string;
    get serverWithApiUrl(): string;
    /**
     * @description Retorna a linha de produto que está sendo utilizada.
     * @returns string
     */
    get productLine(): string;
    get isProtheusRender(): boolean;
    freeAppConfig(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProAppConfigService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProAppConfigService>;
}
