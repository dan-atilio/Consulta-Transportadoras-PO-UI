import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ProJsToAdvplService } from '../../../pro-js-to-advpl/services/pro-js-to-advpl.service';
import { ProAccessToken, ProAuthToken } from '../../models/pro-auth-token';
import { ProUser } from '../../models/pro-user';
import { ProUserInfo } from '../../models/pro-user-info';
import { ProUserInfoService } from '../pro-user-info/pro-user-info.service';
import { ProSessionInfoService } from '../../../pro-session-info';
import { ProMfaService } from '../../../pro-mfa/pro-mfa.service';
import * as i0 from "@angular/core";
export declare class ProAuthService {
    private http;
    private proUserInfoService;
    private advplService;
    private sessionInfoService;
    private proMfaService;
    redirectUrl: string;
    private _token;
    private _ProUserInfo;
    constructor(http: HttpClient, proUserInfoService: ProUserInfoService, advplService: ProJsToAdvplService, sessionInfoService: ProSessionInfoService, proMfaService: ProMfaService);
    requestLoginDefaults(): Observable<ProUser>;
    requestToken(user: ProUser): Observable<ProAuthToken>;
    refreshToken(refresh_token: string): Observable<ProAuthToken>;
    login(user: ProUser): Observable<ProAuthToken>;
    passwordRecovery(user: string): void;
    saveToken(token: ProAuthToken): void;
    saveUserInfo(userId: string): void;
    isTokenValid(now?: number): boolean;
    updateToken(): Promise<void>;
    get userInfo(): ProUserInfo;
    /**
     * @description Retorna o token de autenticação gerado.
     */
    get token(): ProAuthToken;
    get isUserAuthenticate(): boolean;
    /**
     * @description Realiza a limpeza do token ao realizar o logout.
     */
    logout(): void;
    getTokenPayload(token?: string): ProAccessToken;
    get userId(): string;
    /**
     * @description
     * Exibir a mensagem de confirmação de Autenticação.
     */
    showLoginMessage(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProAuthService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProAuthService>;
}
