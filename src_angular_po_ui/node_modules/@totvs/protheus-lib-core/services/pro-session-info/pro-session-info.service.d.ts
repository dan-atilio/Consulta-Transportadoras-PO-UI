import { ProBranch, ProCompany } from '../pro-tenant';
import { ProSystemModules } from '../pro-system-info';
import { ProAppConfig } from '../pro-app-config';
import { ProRole } from '../pro-role';
import { ProAuthToken, ProUser } from '../pro-authorization';
import { ProSessionInfo } from './models/pro-session-info.interface';
import { ProThemeConfiguration } from '../pro-theme/models/pro-theme';
import * as i0 from "@angular/core";
/**
 * @description Serviço para salvar as informações de sessão após login.
 */
export declare class ProSessionInfoService {
    private proAppConfig;
    private appName;
    private proCompany;
    private proIdiom;
    private proBranch;
    private proDataBase;
    private remoteType;
    private socketPort;
    private proSystemModule;
    private proRole;
    private proModule;
    private token;
    private erpAppConfig;
    private proUser;
    private erpToken;
    private theme;
    /**
     * @description Atribui as informações de sessão.
     */
    setSessionInfo(): void;
    /**
     * @description Retorna objeto com informações gerais da sessão.
     * @returns ProSessionInfo
     */
    getSessionInfo(): ProSessionInfo;
    /**
     * @description Retorna as informações da empresa.
     * @returns ProCompany
     */
    getCompany(): ProCompany;
    /**
     * @description Retorna as informações da filial.
     * @returns ProBranch
     */
    getBranch(): ProBranch;
    /**
     * @description Retorna o módulo.
     * @returns string
     */
    getModule(): string;
    /**
     * @description Retorna as informações o nome do app.
     * @returns string
     */
    getAppName(): string;
    /**
     * @description Retorna as informações do módulo.
     * @returns ProSystemModules
     */
    getSystemModule(): ProSystemModules;
    /**
     * @description Retorna a database.
     * @returns string
     */
    getDataBase(): string;
    /**
     * @description Retorna tipo do remote.
     * @returns number
     */
    getRemoteType(): number;
    /**
     * @description Retorna porta de conexão do socket.
     * @returns number
     */
    getSocketPort(): number;
    /**
     * @description Retorna as informações do app.
     * @returns ProAppConfig
     */
    getAppConfig(): ProAppConfig;
    /**
     * @description Retorna idioma.
     * @returns string
     */
    getIdiom(): string;
    /**
     * @description Retorna as informações de papel de usuário.
     * @returns ProRole
     */
    getRole(): ProRole;
    /**
     * @description Retorna as do token do usuário.
     * @returns ProAuthToken
     */
    getToken(): ProAuthToken;
    /**
     * @description Retorna as informações do app.
     * @returns ProAppConfig
     */
    getErpAppConfig(): ProAppConfig;
    /**
     * @description Retorna as informações do usuário.
     * @returns ProUser
     */
    getUser(): ProUser;
    /**
     * @description Retorna as informações do token do usuário.
     * @returns ProAuthToken
     */
    getErpToken(): ProAuthToken;
    /**
    * @description Retorna o tema selecionado.
    * @returns ProThemeConfiguration
    */
    getTheme(): ProThemeConfiguration;
    /**
     * @description Atribui as informações da empresa.
     */
    private setCompany;
    /**
     * @description Atribui as informações da filial.
     */
    private setBranch;
    /**
     * @description Atribui o módulo.
     */
    private setModule;
    /**
     * @description Atribui o nome do app.
     */
    private setAppName;
    /**
     * @description Atribui as informações do módulo.
     */
    private setSystemModule;
    /**
     * @description Atribui a database.
     */
    private setDataBase;
    /**
     * @description Atribui o tipo de remote.
     */
    private setRemoteType;
    /**
     * @description Atribui a porta de conexão do socket.
     */
    private setSocketPort;
    /**
     * @description Atribui as informações do app.
     */
    private setAppConfig;
    /**
     * @description Atribui o idioma.
     */
    setIdiom(idiom: string): void;
    /**
     * @description Atribui as informações do papel de usuário.
     */
    private setRole;
    /**
     * @description Atribui as informações dao token do usuário.
     */
    private setToken;
    /**
     * @description Atribui as informações do app.
     */
    setErpAppConfig(appConfig: ProAppConfig): void;
    /**
     * @description Atribui as informações do usuário.
     */
    private setUser;
    /**
     * @description Atribui as informações do token do usuário.
     */
    setErpToken(erpToken: ProAuthToken): void;
    /**
    * @description Atribui o tema utilizado
    */
    setTheme(theme: ProThemeConfiguration): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProSessionInfoService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ProSessionInfoService>;
}
