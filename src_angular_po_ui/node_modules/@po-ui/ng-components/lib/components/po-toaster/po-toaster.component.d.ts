import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { PoThemeService } from '../../services/po-theme/po-theme.service';
import { PoLanguageService } from '../../services/po-language';
import { PoButtonComponent } from '../po-button';
import { PoToaster } from './interface/po-toaster.interface';
import { PoToasterBaseComponent } from './po-toaster-base.component';
import * as i0 from "@angular/core";
/**
 * @docsExtends PoToasterBaseComponent
 *
 * @example
 *
 * <example name="po-toaster-basic" title="PO Toaster Basic">
 *  <file name="sample-po-toaster-basic/sample-po-toaster-basic.component.html"> </file>
 *  <file name="sample-po-toaster-basic/sample-po-toaster-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-toaster-labs" title="PO Toaster Labs">
 *  <file name="sample-po-toaster-labs/sample-po-toaster-labs.component.html"> </file>
 *  <file name="sample-po-toaster-labs/sample-po-toaster-labs.component.ts"> </file>
 * </example>
 */
export declare class PoToasterComponent extends PoToasterBaseComponent implements AfterViewInit, OnDestroy, OnChanges {
    changeDetector: ChangeDetectorRef;
    protected poThemeService: PoThemeService;
    private renderer?;
    toaster: ElementRef;
    buttonClose: PoButtonComponent;
    alive: boolean;
    language: string;
    literals: any;
    icon: string;
    margin: number;
    observableOnClose: Subject<any>;
    toasterPosition: string;
    toasterType: string;
    constructor(poLanguageService: PoLanguageService, changeDetector: ChangeDetectorRef, poThemeService: PoThemeService, renderer?: Renderer2);
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    changePosition(position: number): void;
    close(): void;
    setFadeOut(): void;
    setFadeIn(): void;
    configToaster(poToaster: PoToaster): void;
    hasClose(): boolean;
    isAlert(): boolean;
    isInline(): boolean;
    getIcon(): string;
    show(): void;
    hide(): void;
    getToasterPosition(): string;
    getToasterType(): string;
    onButtonClose(event: any): void;
    poToasterAction(event: any): void;
    returnHeightToaster(position: any): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoToasterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PoToasterComponent, "po-toaster", never, {}, {}, never, never, false, never>;
}
