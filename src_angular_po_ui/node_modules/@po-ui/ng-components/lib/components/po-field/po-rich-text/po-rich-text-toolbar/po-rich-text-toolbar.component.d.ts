import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { PoButtonGroupItem } from '../../../po-button-group';
import { PoRichTextToolbarActions } from '../enum/po-rich-text-toolbar-actions.enum';
import { PoRichTextToolbarButtonGroupItem } from '../interfaces/po-rich-text-toolbar-button-group-item.interface';
import { PoRichTextImageModalComponent } from '../po-rich-text-image-modal/po-rich-text-image-modal.component';
import { PoRichTextLinkModalComponent } from '../po-rich-text-link-modal/po-rich-text-link-modal.component';
import * as i0 from "@angular/core";
export declare class PoRichTextToolbarComponent implements AfterViewInit {
    private languageService;
    colorPickerInput: ElementRef;
    toolbarElement: ElementRef;
    richTextImageModal: PoRichTextImageModalComponent;
    richTextLinkModal: PoRichTextLinkModalComponent;
    command: EventEmitter<string | {
        command: string;
        value: string;
    }>;
    modal: EventEmitter<any>;
    linkEditing: EventEmitter<any>;
    readonly literals?: any;
    alignButtons: Array<PoRichTextToolbarButtonGroupItem>;
    formatButtons: Array<PoRichTextToolbarButtonGroupItem>;
    listButtons: Array<PoRichTextToolbarButtonGroupItem>;
    linkButtons: Array<PoRichTextToolbarButtonGroupItem>;
    mediaButtons: Array<PoButtonGroupItem>;
    private _readonly;
    private selectedLinkElement;
    private _hideToolbarActions;
    formatToolbarAction: PoRichTextToolbarActions;
    colorToolbarAction: PoRichTextToolbarActions;
    alignToolbarAction: PoRichTextToolbarActions;
    listToolbarAction: PoRichTextToolbarActions;
    linkToolbarAction: PoRichTextToolbarActions;
    mediaToolbarAction: PoRichTextToolbarActions;
    /**
     * @optional
     *
     * @description
     *
     * Define as ações da barra de ferramentas do `PoRichTextComponent` que serão ocultadas.
     * Aceita um único valor do tipo `PoRichTextToolbarActions` ou uma lista de valores.
     *
     * > Esta propriedade sobrepõe a configuração da propriedade `p-disabled-text-align` quando for passada como `false`, caso sejam definidas simultaneamente.
     *
     * @default `[]`
     *
     * @example
     * ```
     * // Oculta apenas o seletor de cores
     * component.hideToolbarActions = PoRichTextToolbarActions.Color;
     *
     * // Oculta as opções de alinhamento e link
     * component.hideToolbarActions = [PoRichTextToolbarActions.Align, PoRichTextToolbarActions.Link];
     * ```
     */
    set hideToolbarActions(actions: Array<PoRichTextToolbarActions> | PoRichTextToolbarActions);
    get hideToolbarActions(): Array<PoRichTextToolbarActions>;
    set readonly(value: boolean);
    get readonly(): boolean;
    get isInternetExplorer(): boolean;
    size: string;
    constructor(languageService: PoLanguageService);
    ngAfterViewInit(): void;
    changeTextColor(value: any): void;
    emitLinkEditing(isLinkEdit: boolean): void;
    selectedLink(selectedLinkElement: any): void;
    setButtonsStates(obj: {
        commands: Array<string>;
        hexColor: string;
    }): void;
    isActionHidden(action: PoRichTextToolbarActions): boolean;
    showColor(): boolean;
    shortcutTrigger(): void;
    emitCommand(command: string): void;
    private emitAlignCommand;
    private removeButtonFocus;
    private setColorInColorPicker;
    private toggleDisableButtons;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoRichTextToolbarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PoRichTextToolbarComponent, "po-rich-text-toolbar", never, { "hideToolbarActions": { "alias": "p-hide-toolbar-actions"; "required": false; }; "readonly": { "alias": "p-readonly"; "required": false; }; "size": { "alias": "p-size"; "required": false; }; }, { "command": "p-command"; "modal": "p-modal"; "linkEditing": "p-link-editing"; }, never, never, false, never>;
}
