import { EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare abstract class PoFieldModel<T> implements ControlValueAccessor {
    additionalHelpEventTrigger: string | undefined;
    /**
     * @optional
     *
     * @description
     * Exibe um ícone de ajuda adicional ao `p-help`, com o texto desta propriedade no tooltip.
     * Se o evento `p-additional-help` estiver definido, o tooltip não será exibido.
     * **Como boa prática, indica-se utilizar um texto com até 140 caracteres.**
     * > Requer um recuo mínimo de 8px se o componente estiver próximo à lateral da tela.
     */
    additionalHelpTooltip?: string;
    /**
     * @optional
     *
     * @description
     *
     * Define que o tooltip (`p-additional-help-tooltip` e/ou `p-error-limit`) será incluído no body da página e não
     * dentro do componente. Essa opção pode ser necessária em cenários com containers que possuem scroll ou overflow
     * escondido, garantindo o posicionamento correto do tooltip próximo ao elemento.
     *
     * > Quando utilizado com `p-additional-help-tooltip`, leitores de tela como o NVDA podem não ler o conteúdo do tooltip.
     *
     * @default `false`
     */
    appendBox: boolean;
    /** Rótulo exibido pelo componente. */
    label: string;
    /** Nome do componente. */
    name: string;
    /** Texto de apoio para o campo. */
    help: string;
    /**
     * @optional
     *
     * @description
     *
     * Indica se o campo será desabilitado.
     *
     * @default `false`
     */
    disabled: boolean;
    /**
     * @optional
     *
     * @description
     * Evento disparado ao clicar no ícone de ajuda adicional.
     * Este evento ativa automaticamente a exibição do ícone de ajuda adicional ao `p-help`.
     */
    additionalHelp: EventEmitter<any>;
    /**
     * @optional
     *
     * @description
     *
     * Evento disparado ao alterar valor do campo.
     */
    change: EventEmitter<T>;
    /**
     * @optional
     *
     * @description
     * Evento disparado quando uma tecla é pressionada enquanto o foco está no componente.
     * Retorna um objeto `KeyboardEvent` com informações sobre a tecla.
     */
    keydown: EventEmitter<KeyboardEvent>;
    displayAdditionalHelp: boolean;
    value: T;
    protected onTouched: any;
    private propagateChange;
    constructor();
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: T): void;
    emitAdditionalHelp(): void;
    emitChange(value: any): void;
    getAdditionalHelpTooltip(): string;
    /**
     * Método que exibe `p-additionalHelpTooltip` ou executa a ação definida em `p-additionalHelp`.
     * Para isso, será necessário configurar uma tecla de atalho utilizando o evento `p-keydown`.
     *
     * ```
     * <po-nome-component
     *  #component
     *  ...
     *  p-additional-help-tooltip="Mensagem de ajuda complementar"
     *  (p-keydown)="onKeyDown($event, component)"
     * ></po-nome-component>
     * ```
     * ```
     * ...
     * onKeyDown(event: KeyboardEvent, inp: PoNomeDoComponente): void {
     *  if (event.code === 'F9') {
     *    inp.showAdditionalHelp();
     *  }
     * }
     * ```
     */
    showAdditionalHelp(): boolean;
    showAdditionalHelpIcon(): boolean;
    private isAdditionalHelpEventTriggered;
    protected updateModel(value: T): void;
    abstract onWriteValue(value: T): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PoFieldModel<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PoFieldModel<any>, never, never, { "additionalHelpEventTrigger": { "alias": "additionalHelpEventTrigger"; "required": false; }; "additionalHelpTooltip": { "alias": "p-additional-help-tooltip"; "required": false; }; "appendBox": { "alias": "p-append-in-body"; "required": false; }; "label": { "alias": "p-label"; "required": false; }; "name": { "alias": "name"; "required": false; }; "help": { "alias": "p-help"; "required": false; }; "disabled": { "alias": "p-disabled"; "required": false; }; }, { "additionalHelp": "p-additional-help"; "change": "p-change"; "keydown": "p-keydown"; }, never, never, true, never>;
    static ngAcceptInputType_appendBox: any;
    static ngAcceptInputType_disabled: any;
}
