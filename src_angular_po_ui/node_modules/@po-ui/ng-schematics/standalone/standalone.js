"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.importProvidersFrom = importProvidersFrom;
const ts = require("@schematics/angular/third_party/github.com/Microsoft/TypeScript/lib/typescript");
const utility_1 = require("@schematics/angular/utility");
const change_1 = require("@schematics/angular/utility/change");
const app_config_1 = require("@schematics/angular/utility/standalone/app_config");
const util_1 = require("@schematics/angular/utility/standalone/util");
const project_1 = require("../project");
const ast_utils_1 = require("@schematics/angular/utility/ast-utils");
const ng_ast_utils_1 = require("@schematics/angular/utility/ng-ast-utils");
function importProvidersFrom(options, moduleName, packageName, argsImportProvidersFrom) {
    return (host) => {
        const workspace = (0, project_1.getWorkspaceConfigGracefully)(host) ?? {};
        const project = (0, project_1.getProjectFromWorkspace)(workspace, options.project);
        const browserEntryPoint = (0, project_1.getProjectMainFile)(project);
        if (!(0, ng_ast_utils_1.isStandaloneApp)(host, browserEntryPoint)) {
            return host;
        }
        return addProvider(host, options.project, browserEntryPoint, moduleName, packageName, argsImportProvidersFrom);
    };
}
function addProvider(host, projectName, mainPath, moduleName, packageName, argsImportProvidersFrom) {
    const bootstrapCall = (0, util_1.findBootstrapApplicationCall)(host, mainPath);
    const appConfig = (0, app_config_1.findAppConfig)(bootstrapCall, host, mainPath)?.filePath || mainPath;
    addImport(host, appConfig, moduleName, packageName);
    return (0, utility_1.addRootProvider)(projectName, ({ code, external }) => code `${external('importProvidersFrom', '@angular/core')}(${argsImportProvidersFrom})`);
}
function addImport(host, filePath, symbolName, moduleName) {
    const moduleSource = getTsSourceFile(host, filePath);
    const change = (0, ast_utils_1.insertImport)(moduleSource, filePath, symbolName, moduleName);
    if (change) {
        const recorder = host.beginUpdate(filePath);
        (0, change_1.applyToUpdateRecorder)(recorder, [change]);
        host.commitUpdate(recorder);
    }
}
function getTsSourceFile(host, path) {
    const content = host.readText(path);
    const source = ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
    return source;
}
//# sourceMappingURL=standalone.js.map